import React, { useState, useEffect, KeyboardEvent } from 'react';
import { Link } from 'react-router-dom';
import { Equipment, EQUIPMENT_CATEGORIES, EquipmentFormData } from '../../types/equipment';

interface DropdownState {
  [key: string]: boolean;
}

interface DeleteConfirmState {
  [key: string]: boolean;
}

interface SuggestedEquipment {
  id: string;
  name: string;
  category: string;
  price: string;
  description: string;
  image: string;
  link: string;
  retailer: string;
}

interface EquipmentSetup {
  id: string;
  name: string;
  description: string;
  equipment: Equipment[];
  createdAt: string;
  updatedAt: string;
}

const ShortcutHint = () => (
  <span className="ml-2 text-xs text-white/70">
    {navigator.platform.toLowerCase().includes('mac') ? (
      <>
        <kbd className="font-sans">âŒ˜</kbd>
        <span className="mx-0.5">+</span>
        <kbd className="font-sans">Enter</kbd>
      </>
    ) : (
      <>
        <kbd className="font-sans">Ctrl</kbd>
        <span className="mx-0.5">+</span>
        <kbd className="font-sans">Enter</kbd>
      </>
    )}
  </span>
);

const EquipmentListPage: React.FC = () => {
  const [selectedCategory, setSelectedCategory] = useState<string>('');
  const [dropdownOpen, setDropdownOpen] = useState<DropdownState>({});
  const [deleteConfirm, setDeleteConfirm] = useState<DeleteConfirmState>({});
  const [isAddingEquipment, setIsAddingEquipment] = useState(false);
  const [selectedEquipment, setSelectedEquipment] = useState<Equipment | null>(null);
  const [isDrawerOpen, setIsDrawerOpen] = useState(false);
  
  // Add Equipment form states
  const [isLoading, setIsLoading] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const [error, setError] = useState('');
  const [url, setUrl] = useState('');
  const [description, setDescription] = useState('');
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [showForm, setShowForm] = useState(false);
  const [suggestions, setSuggestions] = useState<SuggestedEquipment[]>([]);
  const [formData, setFormData] = useState<EquipmentFormData>({
    name: '',
    description: '',
    category: '',
    price: '',
    purchaseDate: '',
    purchaseLocation: '',
    link: '',
    image: '',
  });

  const [selectedSetup, setSelectedSetup] = useState<string>('default');
  const [isAddingSetup, setIsAddingSetup] = useState(false);
  const [setupFormData, setSetupFormData] = useState({
    name: '',
    description: '',
  });

  const [isShareModalOpen, setIsShareModalOpen] = useState(false);

  const [isFilterOpen, setIsFilterOpen] = useState(false);
  const [selectedCategories, setSelectedCategories] = useState<string[]>([]);

  const toggleDropdown = (id: string) => {
    setDropdownOpen(prev => ({
      ...prev,
      [id]: !prev[id]
    }));
    // Reset delete confirmation when closing dropdown
    if (deleteConfirm[id]) {
      setDeleteConfirm(prev => ({
        ...prev,
        [id]: false
      }));
    }
  };

  const handleDelete = (id: string) => {
    if (!deleteConfirm[id]) {
      setDeleteConfirm(prev => ({
        ...prev,
        [id]: true
      }));
    } else {
      // Actually delete the item
      console.log('Deleting item:', id);
      toggleDropdown(id);
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const processUrl = async () => {
    if (!url) {
      setError('Please enter a product URL');
      return;
    }

    setIsProcessing(true);
    setError('');

    try {
      // Simulate processing delay
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // Mock data based on URL patterns
      let mockData: Partial<EquipmentFormData> = {};
      
      if (url.includes('gaggia')) {
        mockData = {
          name: 'Gaggia Classic Pro',
          category: 'Espresso Machine',
          price: '449.00',
          description: 'Semi-automatic espresso machine with 58mm portafilter',
          purchaseLocation: 'Gaggia Official Store',
          image: 'https://images.unsplash.com/photo-1574914629385-46b1d7633c91?ixlib=rb-1.2.1&auto=format&fit=crop&w=1470&q=80'
        };
      } else if (url.includes('amazon')) {
        mockData = {
          name: 'Coffee Scale with Timer',
          category: 'Scale',
          price: '19.99',
          description: 'Digital coffee scale with timer for pour over and espresso',
          purchaseLocation: 'Amazon',
          image: 'https://images.unsplash.com/photo-1517668808822-9ebb02f2a0e6?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60'
        };
      } else if (url.includes('df64') || url.includes('grinder')) {
        mockData = {
          name: 'DF64 Coffee Grinder',
          category: 'Grinder',
          price: '399.00',
          description: 'Single dose coffee grinder with 64mm flat burrs',
          purchaseLocation: 'Online Retailer',
          image: 'https://images.unsplash.com/photo-1517668808822-9ebb02f2a0e6?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60'
        };
      }
      
      mockData.link = url;
      setFormData(prev => ({
        ...prev,
        ...mockData
      }));
      
      setShowForm(true);
    } catch (err) {
      setError('Failed to process URL. Please try again or enter details manually.');
    } finally {
      setIsProcessing(false);
    }
  };

  const processDescription = async () => {
    if (!description) {
      setError('Please enter a description of your equipment');
      return;
    }

    setIsProcessing(true);
    setError('');

    try {
      await new Promise(resolve => setTimeout(resolve, 1000));

      const mockSuggestions: SuggestedEquipment[] = [];
      
      if (description.toLowerCase().includes('gaggia')) {
        mockSuggestions.push({
          id: '1',
          name: 'Gaggia Classic Pro',
          category: 'Espresso Machine',
          price: '449.00',
          description: 'Semi-automatic espresso machine with commercial 58mm portafilter',
          image: 'https://images.unsplash.com/photo-1574914629385-46b1d7633c91',
          link: 'https://www.gaggia.com/classic-pro',
          retailer: 'Gaggia Direct'
        });
      }

      if (description.toLowerCase().includes('grinder')) {
        mockSuggestions.push({
          id: '3',
          name: 'DF64 Coffee Grinder',
          category: 'Grinder',
          price: '399.00',
          description: 'Single dose grinder with 64mm flat burrs',
          image: 'https://example.com/df64.jpg',
          link: 'https://example.com/df64',
          retailer: 'Specialty Coffee Retailer'
        });
      }

      setSuggestions(mockSuggestions);
      setShowSuggestions(true);
    } catch (err) {
      setError('Failed to process description. Please try again or enter details manually.');
    } finally {
      setIsProcessing(false);
    }
  };

  const selectSuggestion = (suggestion: SuggestedEquipment) => {
    setFormData({
      name: suggestion.name,
      category: suggestion.category,
      price: suggestion.price,
      description: suggestion.description,
      purchaseLocation: suggestion.retailer,
      link: suggestion.link,
      image: suggestion.image,
      purchaseDate: '',
    });
    setShowSuggestions(false);
    setShowForm(true);
  };

  const handleSubmitInput = async () => {
    if (!description && !url) {
      setError('Please enter a description or product URL');
      return;
    }

    setIsProcessing(true);
    setError('');

    try {
      if (url) {
        await processUrl();
      } else {
        await processDescription();
      }
    } catch (err) {
      setError('Failed to process input. Please try again or enter details manually.');
    } finally {
      setIsProcessing(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setIsLoading(true);

    try {
      // In a real app, this would be an API call to create the equipment
      console.log('Equipment data to submit:', formData);
      
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 500));
      
      setIsLoading(false);
      setIsAddingEquipment(false);
      setShowForm(false);
      setFormData({
        name: '',
        description: '',
        category: '',
        price: '',
        purchaseDate: '',
        purchaseLocation: '',
        link: '',
        image: '',
      });
    } catch (err) {
      setError('Failed to add equipment. Please try again.');
      setIsLoading(false);
    }
  };

  const handleKeyDown = (e: KeyboardEvent) => {
    if ((e.metaKey || e.ctrlKey) && e.key === 'Enter') {
      e.preventDefault();
      if (!showForm) {
        handleSubmitInput();
      } else {
        const form = document.querySelector('form');
        if (form) {
          form.requestSubmit();
        }
      }
    }
  };

  useEffect(() => {
    document.addEventListener('keydown', handleKeyDown as any);
    
    // Add click outside handler
    const handleClickOutside = (event: MouseEvent) => {
      const target = event.target as HTMLElement;
      
      // Close filter dropdown if clicking outside
      if (isFilterOpen && !target.closest('.filter-dropdown')) {
        setIsFilterOpen(false);
      }
      
      // Close equipment action dropdowns if clicking outside
      if (Object.keys(dropdownOpen).some(id => dropdownOpen[id])) {
        if (!target.closest('.equipment-dropdown')) {
          setDropdownOpen({});
          setDeleteConfirm({});
        }
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    
    return () => {
      document.removeEventListener('keydown', handleKeyDown as any);
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [url, description, showForm, isFilterOpen, dropdownOpen]);

  // Mock data for equipment list
  const equipmentList: Equipment[] = [
    {
      id: '1',
      name: 'Gaggia Classic Pro',
      description: 'Semi-automatic espresso machine with 58mm portafilter',
      category: 'Espresso Machine',
      price: '$340.00',
      purchaseDate: '2023-01-15',
      purchaseLocation: 'eBay',
      link: 'https://www.gaggia-na.com/products/gaggia-classic-pro',
      image: 'https://images.unsplash.com/photo-1574914629385-46b1d7633c91?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60',
      createdAt: '2023-01-16T12:00:00Z',
      updatedAt: '2023-01-16T12:00:00Z',
      userId: '1',
      retailers: [
        {
          retailerId: 'amazon',
          url: 'https://www.amazon.com/Gaggia-RI9380-46-Classic-Espresso-Machine/dp/B07RQ3NL76',
          price: 349.00,
          inStock: true,
          lastChecked: '2024-03-14T00:00:00Z',
          affiliateEnabled: true
        }
      ],
      defaultRetailer: 'amazon',
      affiliateEnabled: true
    },
    {
      id: '2',
      name: 'DF64 Grinder Gen 2',
      description: 'Single dose coffee grinder with 64mm flat burrs',
      category: 'Grinder',
      price: '$280.00',
      purchaseDate: '2023-01-20',
      purchaseLocation: 'eBay',
      link: 'https://df64coffee.com/products/df64-gen-2-single-dose-coffee-grinder',
      image: 'https://images.unsplash.com/photo-1517668808822-9ebb02f2a0e6?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60',
      createdAt: '2023-01-21T12:00:00Z',
      updatedAt: '2023-01-21T12:00:00Z',
      userId: '1',
      retailers: [
        {
          retailerId: 'df64coffee',
          url: 'https://df64coffee.com/products/df64-gen-2-single-dose-coffee-grinder',
          price: 280.00,
          inStock: true,
          lastChecked: '2024-03-14T00:00:00Z',
          affiliateEnabled: true
        }
      ],
      defaultRetailer: 'df64coffee',
      affiliateEnabled: true
    },
    {
      id: '3',
      name: 'Knock Box',
      description: 'Stainless steel knock box for espresso pucks',
      category: 'Accessory',
      price: '$24.06',
      purchaseDate: '2023-01-25',
      purchaseLocation: 'Amazon',
      link: 'https://www.amazon.com',
      image: 'https://images.unsplash.com/photo-1516224398969-22d83f18903d?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60',
      createdAt: '2023-01-26T12:00:00Z',
      updatedAt: '2023-01-26T12:00:00Z',
      userId: '1',
      retailers: [
        {
          retailerId: 'amazon',
          url: 'https://www.amazon.com',
          price: 24.06,
          inStock: true,
          lastChecked: '2024-03-14T00:00:00Z',
          affiliateEnabled: true
        }
      ],
      defaultRetailer: 'amazon',
      affiliateEnabled: true
    },
    {
      id: '4',
      name: 'Precision Shower Screen',
      description: '55mm IMS precision shower screen for Gaggia Classic',
      category: 'Accessory',
      price: '$12.99',
      purchaseDate: '2023-02-05',
      purchaseLocation: 'Amazon',
      link: 'https://www.amazon.com',
      image: 'https://images.unsplash.com/photo-1516224398969-22d83f18903d?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60',
      createdAt: '2023-02-06T12:00:00Z',
      updatedAt: '2023-02-06T12:00:00Z',
      userId: '1',
      retailers: [
        {
          retailerId: 'amazon',
          url: 'https://www.amazon.com',
          price: 12.99,
          inStock: true,
          lastChecked: '2024-03-14T00:00:00Z',
          affiliateEnabled: true
        }
      ],
      defaultRetailer: 'amazon',
      affiliateEnabled: true
    },
    {
      id: '5',
      name: 'WDT Tool',
      description: 'Distribution tool for espresso grounds',
      category: 'Accessory',
      price: '$8.99',
      purchaseDate: '2023-02-10',
      purchaseLocation: 'Amazon',
      link: 'https://www.amazon.com',
      image: 'https://images.unsplash.com/photo-1516224398969-22d83f18903d?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60',
      createdAt: '2023-02-11T12:00:00Z',
      updatedAt: '2023-02-11T12:00:00Z',
      userId: '1',
      retailers: [
        {
          retailerId: 'amazon',
          url: 'https://www.amazon.com',
          price: 8.99,
          inStock: true,
          lastChecked: '2024-03-14T00:00:00Z',
          affiliateEnabled: true
        }
      ],
      defaultRetailer: 'amazon',
      affiliateEnabled: true
    },
  ];

  // Mock data for equipment setups
  const equipmentSetups: EquipmentSetup[] = [
    {
      id: 'default',
      name: 'Main Setup',
      description: 'My primary coffee equipment',
      equipment: equipmentList,
      createdAt: '2023-01-01T00:00:00Z',
      updatedAt: '2023-01-01T00:00:00Z',
    },
    {
      id: 'travel',
      name: 'Travel Kit',
      description: 'Portable coffee setup for travel',
      equipment: [],
      createdAt: '2023-02-01T00:00:00Z',
      updatedAt: '2023-02-01T00:00:00Z',
    },
  ];

  const handleSetupSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // In a real app, this would create a new setup
    console.log('Creating new setup:', setupFormData);
    setIsAddingSetup(false);
    setSetupFormData({ name: '', description: '' });
  };

  const filteredEquipment = equipmentList
    .filter(item => {
      // First filter by selected setup
      const setup = equipmentSetups.find(s => s.id === selectedSetup);
      if (selectedSetup && setup) {
        return setup.equipment.some(e => e.id === item.id);
      }
      return true;
    })
    .filter(item => {
      // Then filter by category
      if (selectedCategories.length === 0) {
        return true;
      }
      return selectedCategories.includes(item.category);
    });

  const totalValue = filteredEquipment
    .reduce((sum, item) => {
      const price = parseFloat(item.price.replace('$', '').replace(',', ''));
      return sum + price;
    }, 0)
    .toFixed(2);

  const generatePublicUrl = () => {
    const setup = equipmentSetups.find(s => s.id === selectedSetup) || equipmentSetups[0];
    // In production, this would use your actual domain
    return `https://coffee-kit.com/${setup.id}`;
  };

  const generateEmbedCode = () => {
    const setup = equipmentSetups.find(s => s.id === selectedSetup) || equipmentSetups[0];
    return `<iframe src="${generatePublicUrl()}/embed" width="100%" height="600" frameborder="0"></iframe>`;
  };

  const generateShareText = () => {
    const setup = equipmentSetups.find(s => s.id === selectedSetup) || equipmentSetups[0];
    return `Check out my coffee setup: ${generatePublicUrl()}`;
  };

  const toggleCategory = (category: string) => {
    if (selectedCategories.includes(category)) {
      setSelectedCategories(prev => prev.filter(c => c !== category));
    } else {
      setSelectedCategories(prev => [...prev, category]);
    }
  };

  return (
    <div className={`relative transition-all duration-300 ${isDrawerOpen ? 'mr-[440px]' : ''}`}>
      {/* Equipment Setups */}
      <div className="mb-8">
        <div className="mb-4">
          <h2 className="text-lg font-medium text-gray-900">Equipment Setups</h2>
        </div>

        {isAddingSetup ? (
          <form onSubmit={handleSetupSubmit} className="bg-white p-4 rounded-lg shadow mb-4">
            <div className="space-y-4">
              <div>
                <label htmlFor="setupName" className="block text-sm font-medium text-gray-700">
                  Setup Name *
                </label>
                <input
                  type="text"
                  id="setupName"
                  name="name"
                  required
                  value={setupFormData.name}
                  onChange={(e) => setSetupFormData(prev => ({ ...prev, name: e.target.value }))}
                  placeholder="e.g., Aeropress Setup, Travel Kit"
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-coffee-500 focus:ring-coffee-500 sm:text-sm"
                />
              </div>
              <div>
                <label htmlFor="setupDescription" className="block text-sm font-medium text-gray-700">
                  Description
                </label>
                <textarea
                  id="setupDescription"
                  name="description"
                  rows={2}
                  value={setupFormData.description}
                  onChange={(e) => setSetupFormData(prev => ({ ...prev, description: e.target.value }))}
                  placeholder="Describe your setup..."
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-coffee-500 focus:ring-coffee-500 sm:text-sm"
                />
              </div>
              <div className="flex justify-end space-x-3">
                <button
                  type="button"
                  onClick={() => {
                    setIsAddingSetup(false);
                    setSetupFormData({ name: '', description: '' });
                  }}
                  className="px-3 py-1.5 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-coffee-500"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  className="px-3 py-1.5 border border-transparent rounded-md text-sm font-medium text-white bg-coffee-600 hover:bg-coffee-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-coffee-500"
                >
                  Create Setup
                </button>
              </div>
            </div>
          </form>
        ) : (
          <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3">
            {equipmentSetups.map((setup) => (
              <div
                key={setup.id}
                onClick={() => setSelectedSetup(setup.id === selectedSetup ? '' : setup.id)}
                className={`relative rounded-lg border p-3 cursor-pointer transition-colors ${
                  setup.id === selectedSetup
                    ? 'border-coffee-500 bg-coffee-50'
                    : 'border-gray-300 bg-white hover:border-gray-400'
                }`}
              >
                <div className="flex flex-col">
                  <h3 className="text-sm font-medium text-gray-900">{setup.name}</h3>
                  <p className="mt-0.5 text-xs text-gray-500 line-clamp-2">{setup.description}</p>
                  <div className="mt-2">
                    <span className="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-coffee-100 text-coffee-800">
                      {setup.equipment.length} items
                    </span>
                  </div>
                </div>
              </div>
            ))}
            <button
              onClick={() => setIsAddingSetup(true)}
              className="relative rounded-lg border border-dashed border-gray-300 p-3 hover:border-coffee-500 transition-colors group"
            >
              <div className="flex flex-col items-center justify-center h-full text-gray-500 group-hover:text-coffee-600">
                <span className="text-sm font-medium">+ Add setup</span>
              </div>
            </button>
          </div>
        )}
      </div>

      {/* Filter by category */}
      <div className="mb-6">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-2">
            <button
              onClick={() => setSelectedCategories([])}
              className={`px-3 py-1 rounded-full text-sm ${
                selectedCategories.length === 0
                  ? 'bg-coffee-600 text-white'
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              All
            </button>
            <div className="relative">
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  setIsFilterOpen(!isFilterOpen);
                }}
                className="filter-dropdown px-3 py-1 rounded-full text-sm bg-gray-200 text-gray-700 hover:bg-gray-300 inline-flex items-center"
              >
                <span>Filter</span>
                <svg className="ml-1 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                </svg>
              </button>
              {isFilterOpen && (
                <div className="absolute left-0 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 z-[9999]">
                  <div className="py-1" role="menu">
                    {EQUIPMENT_CATEGORIES.map((category) => (
                      <label
                        key={category}
                        className="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 cursor-pointer"
                        onClick={(e) => {
                          e.stopPropagation();
                          toggleCategory(category);
                        }}
                      >
                        <input
                          type="checkbox"
                          checked={selectedCategories.includes(category)}
                          onChange={(e) => {
                            e.stopPropagation();
                            toggleCategory(category);
                          }}
                          className="h-4 w-4 text-coffee-600 focus:ring-coffee-500 border-gray-300 rounded mr-2"
                        />
                        {category}
                      </label>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
          <button
            onClick={() => setIsShareModalOpen(true)}
            className="inline-flex items-center px-4 py-1 border border-coffee-200 rounded-full shadow-sm text-sm font-medium text-coffee-700 bg-coffee-50 hover:bg-coffee-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-coffee-500"
          >
            <svg className="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z" />
            </svg>
            Share Setup
          </button>
        </div>

        {/* Selected category pills */}
        {selectedCategories.length > 0 && (
          <div className="mt-3 flex items-center gap-2">
            <div className="flex flex-wrap gap-2">
              {selectedCategories.map((category) => (
                <button
                  key={category}
                  onClick={() => toggleCategory(category)}
                  className="inline-flex items-center px-2 py-1 rounded-full text-sm bg-coffee-100 text-coffee-800 hover:bg-coffee-200"
                >
                  {category}
                  <svg className="ml-1.5 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              ))}
            </div>
            <button
              onClick={() => setSelectedCategories([])}
              className="text-sm text-gray-500 hover:text-gray-700"
            >
              Clear all
            </button>
          </div>
        )}
      </div>

      {/* Equipment list */}
      <div className="bg-white divide-y divide-gray-200">
        {filteredEquipment.map((item) => (
          <div key={item.id} className="relative">
            <div className="flex items-center px-3 py-2">
              <button
                onClick={() => {
                  setSelectedEquipment(item);
                  setIsDrawerOpen(true);
                }}
                className="flex-1 flex items-center hover:bg-gray-50 rounded-md px-2 text-left"
              >
                <div className="min-w-0 flex-1 flex items-center">
                  <div className="flex-shrink-0 h-10 w-10 bg-gray-200 rounded-md overflow-hidden">
                    {item.image && (
                      <img
                        src={item.image}
                        alt={item.name}
                        className="h-10 w-10 object-cover"
                      />
                    )}
                  </div>
                  <div className="min-w-0 flex-1 px-3 text-left">
                    <div>
                      <p className="text-sm font-medium text-coffee-600 truncate text-left">
                        {item.name}
                      </p>
                      <p className="mt-0.5 text-xs text-gray-500 text-left">
                        <span className="truncate">{item.category}</span>
                      </p>
                    </div>
                  </div>
                </div>
                <div className="text-left">
                  <p className="text-sm font-medium text-gray-900">
                    {item.price}
                  </p>
                </div>
              </button>
              <div className="relative ml-4">
                <button
                  onClick={(e) => {
                    e.preventDefault();
                    toggleDropdown(item.id);
                  }}
                  className="equipment-dropdown p-1 text-gray-400 hover:text-gray-600"
                >
                  <svg className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path d="M6 10a2 2 0 11-4 0 2 2 0 014 0zM12 10a2 2 0 11-4 0 2 2 0 014 0zM16 12a2 2 0 100-4 2 2 0 000 4z" />
                  </svg>
                </button>
                {dropdownOpen[item.id] && (
                  <div className="absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 z-[9999]">
                    <div className="py-1" role="menu">
                      <button
                        onClick={() => {
                          // Handle edit
                          toggleDropdown(item.id);
                        }}
                        className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                      >
                        Edit
                      </button>
                      <button
                        onClick={() => handleDelete(item.id)}
                        className={`block w-full text-left px-4 py-2 text-sm ${
                          deleteConfirm[item.id]
                            ? 'text-red-600 font-medium bg-red-50 hover:bg-red-100'
                            : 'text-gray-700 hover:bg-gray-100'
                        }`}
                      >
                        {deleteConfirm[item.id] ? 'Click again to confirm' : 'Delete'}
                      </button>
                      <button
                        onClick={() => {
                          // Handle duplicate
                          toggleDropdown(item.id);
                        }}
                        className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                      >
                        Duplicate
                      </button>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        ))}
        <div className="px-4 py-3 bg-gray-50">
          <div className="flex justify-between items-center">
            <div className="flex items-center gap-3">
              <button
                onClick={() => {
                  setIsAddingEquipment(!isAddingEquipment);
                  if (!isAddingEquipment) {
                    setShowForm(false);
                    setShowSuggestions(false);
                    setError('');
                  }
                }}
                className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-white bg-coffee-600 hover:bg-coffee-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-coffee-500"
              >
                {isAddingEquipment ? 'Cancel' : 'Add Equipment'}
              </button>
            </div>
            <p className="text-sm pr-10 font-medium text-gray-900">
              ${totalValue}
            </p>
          </div>

          {isShareModalOpen && (
            <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4 z-50">
              <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full p-6">
                <div className="flex justify-between items-start mb-4">
                  <h3 className="text-lg font-medium text-gray-900">Share Your Setup</h3>
                  <button
                    onClick={() => setIsShareModalOpen(false)}
                    className="text-gray-400 hover:text-gray-500"
                  >
                    <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>

                <div className="space-y-6">
                  {/* Public URL */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Your Public URL
                    </label>
                    <div className="flex gap-2">
                      <div className="relative flex-1">
                        <input
                          type="text"
                          readOnly
                          value={generatePublicUrl()}
                          className="block w-full h-9 px-3 bg-black/10 text-gray-900 rounded-md font-mono text-sm border-0 focus:ring-0"
                        />
                      </div>
                      <button
                        onClick={() => {
                          navigator.clipboard.writeText(generatePublicUrl());
                          // TODO: Add toast notification
                        }}
                        className="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-coffee-500"
                      >
                        Copy link
                      </button>
                    </div>
                  </div>

                  {/* Share on social */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Share on Social
                    </label>
                    <div className="flex flex-wrap gap-3">
                      <button
                        onClick={() => {
                          const text = encodeURIComponent(generateShareText());
                          window.open(`https://twitter.com/intent/tweet?text=${text}`, '_blank');
                        }}
                        className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-[#1DA1F2] hover:bg-[#1a8cd8] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#1DA1F2]"
                      >
                        <svg className="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 24 24">
                          <path d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z"/>
                        </svg>
                        Share on Twitter
                      </button>
                      <button
                        onClick={() => {
                          const url = generatePublicUrl();
                          const title = encodeURIComponent('My Coffee Setup [r/espresso]');
                          window.open(`https://reddit.com/r/espresso/submit?url=${encodeURIComponent(url)}&title=${title}&sr=espresso`, '_blank');
                        }}
                        className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-[#FF4500] hover:bg-[#e63e00] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#FF4500]"
                      >
                        <svg className="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 24 24">
                          <path d="M12 0A12 12 0 0 0 0 12a12 12 0 0 0 12 12 12 12 0 0 0 12-12A12 12 0 0 0 12 0zm5.01 4.744c.688 0 1.25.561 1.25 1.249a1.25 1.25 0 0 1-2.498.056l-2.597-.547-.8 3.747c1.824.07 3.48.632 4.674 1.488.308-.309.73-.491 1.207-.491.968 0 1.754.786 1.754 1.754 0 .716-.435 1.333-1.01 1.614a3.111 3.111 0 0 1 .042.52c0 2.694-3.13 4.87-7.004 4.87-3.874 0-7.004-2.176-7.004-4.87 0-.183.015-.366.043-.534A1.748 1.748 0 0 1 4.028 12c0-.968.786-1.754 1.754-1.754.463 0 .898.196 1.207.49 1.207-.883 2.878-1.43 4.744-1.487l.885-4.182a.342.342 0 0 1 .14-.197.35.35 0 0 1 .238-.042l2.906.617a1.214 1.214 0 0 1 1.108-.701zM9.25 12C8.561 12 8 12.562 8 13.25c0 .687.561 1.248 1.25 1.248.687 0 1.248-.561 1.248-1.249 0-.688-.561-1.249-1.249-1.249zm5.5 0c-.687 0-1.248.561-1.248 1.25 0 .687.561 1.248 1.248 1.248 1.248.688 0 1.249-.561 1.249-1.249 0-.687-.562-1.249-1.25-1.249zm-5.466 3.99a.327.327 0 0 0-.231.094.33.33 0 0 0 0 .463c.842.842 2.484.913 2.961.913.477 0 2.105-.056 2.961-.913a.361.361 0 0 0 .029-.463.33.33 0 0 0-.464 0c-.547.533-1.684.73-2.512.73-.828 0-1.979-.196-2.512-.73a.326.326 0 0 0-.232-.095z"/>
                        </svg>
                        Share on Reddit
                      </button>
                    </div>
                  </div>

                  {/* Embed code */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Embed in Your Website
                    </label>
                    <div className="relative">
                      <textarea
                        rows={3}
                        readOnly
                        value={generateEmbedCode()}
                        className="block w-full bg-black/10 border-gray-300 rounded-md focus:ring-coffee-500 focus:border-coffee-500 sm:text-sm font-mono"
                      />
                      <button
                        onClick={() => {
                          navigator.clipboard.writeText(generateEmbedCode());
                          // TODO: Add toast notification
                        }}
                        className="absolute top-2 right-2 inline-flex items-center px-2 py-1 border border-gray-300 shadow-sm text-xs font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-coffee-500"
                      >
                        Copy
                      </button>
                    </div>
                    <p className="mt-2 text-xs text-gray-500">
                      Paste this code into your website to display your coffee setup.
                    </p>
                  </div>

                  <div className="mt-4 pt-4 border-t border-gray-200">
                    <p className="text-sm text-gray-500">Pro tip: Share your setup on social media to inspire others and get feedback from the coffee community! ðŸš€</p>
                  </div>
                </div>
              </div>
            </div>
          )}

          {isAddingEquipment && (
            <div className="mt-4">
              {error && (
                <div className="mb-4 bg-red-50 border-l-4 border-red-400 p-4">
                  <div className="flex">
                    <div className="flex-shrink-0">
                      <svg className="h-5 w-5 text-red-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                        <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                      </svg>
                    </div>
                    <div className="ml-3">
                      <p className="text-sm text-red-700">{error}</p>
                    </div>
                  </div>
                </div>
              )}

              {!showForm && (
                <div className="bg-white rounded-md">
                  <div>
                    <label htmlFor="input" className="block text-sm font-medium text-gray-700">
                      Describe Your Equipment or Paste a Product URL
                    </label>
                    <div className="mt-1">
                      <textarea
                        id="input"
                        name="input"
                        rows={4}
                        value={description || url}
                        onChange={(e) => {
                          const value = e.target.value;
                          if (value.startsWith('http')) {
                            setUrl(value);
                            setDescription('');
                          } else {
                            setDescription(value);
                            setUrl('');
                          }
                          setShowSuggestions(false);
                        }}
                        className="shadow-sm focus:ring-coffee-500 focus:border-coffee-500 block w-full sm:text-sm border-gray-300 rounded-md"
                        placeholder="Example: I have a Gaggia Classic Pro espresso machine&#10;or&#10;https://example.com/coffee-product"
                      />
                    </div>
                    <p className="mt-2 text-sm text-gray-500">
                      Enter a description of your equipment or paste a product URL, and we'll help you find matching products.
                    </p>
                    <div className="mt-4 flex items-center gap-6">
                      <button
                        type="button"
                        onClick={handleSubmitInput}
                        disabled={isProcessing}
                        className="inline-flex items-center px-6 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-coffee-600 hover:bg-coffee-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-coffee-500 disabled:opacity-50"
                      >
                        {isProcessing ? (
                          <>
                            <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 0 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            Processing...
                          </>
                        ) : (
                          <>
                            Submit
                            <ShortcutHint />
                          </>
                        )}
                      </button>
                      <button
                        type="button"
                        onClick={() => setShowForm(true)}
                        className="text-coffee-600 hover:text-coffee-500 text-sm"
                      >
                        or enter details manually â†’
                      </button>
                    </div>
                  </div>
                </div>
              )}

              {showSuggestions && (
                <div className="mt-4">
                  <h3 className="text-lg font-medium text-gray-900">Did you mean...</h3>
                  <div className="mt-4 grid grid-cols-1 gap-4">
                    {suggestions.map((suggestion) => (
                      <div
                        key={suggestion.id}
                        className="relative rounded-lg border border-gray-300 bg-white px-6 py-5 shadow-sm flex items-center space-x-3 hover:border-gray-400 focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-coffee-500 cursor-pointer"
                        onClick={() => selectSuggestion(suggestion)}
                      >
                        <div className="flex-shrink-0">
                          <img className="h-16 w-16 rounded object-cover" src={suggestion.image} alt="" />
                        </div>
                        <div className="flex-1 min-w-0">
                          <div className="focus:outline-none">
                            <span className="absolute inset-0" aria-hidden="true" />
                            <p className="text-sm font-medium text-gray-900">{suggestion.name}</p>
                            <p className="text-sm text-gray-500 truncate">{suggestion.description}</p>
                            <p className="text-sm font-medium text-coffee-600">${suggestion.price}</p>
                            <p className="text-xs text-gray-400">from {suggestion.retailer}</p>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {showForm && (
                <form onSubmit={handleSubmit} className="mt-4 space-y-4">
                  <div className="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6">
                    <div className="sm:col-span-6">
                      <label htmlFor="name" className="block text-sm font-medium text-gray-700">
                        Name *
                      </label>
                      <div className="mt-1">
                        <input
                          type="text"
                          name="name"
                          id="name"
                          required
                          value={formData.name}
                          onChange={handleInputChange}
                          className="shadow-sm focus:ring-coffee-500 focus:border-coffee-500 block w-full sm:text-sm border-gray-300 rounded-md"
                        />
                      </div>
                    </div>

                    <div className="sm:col-span-3">
                      <label htmlFor="category" className="block text-sm font-medium text-gray-700">
                        Category *
                      </label>
                      <div className="mt-1">
                        <select
                          id="category"
                          name="category"
                          required
                          value={formData.category}
                          onChange={handleInputChange}
                          className="shadow-sm focus:ring-coffee-500 focus:border-coffee-500 block w-full sm:text-sm border-gray-300 rounded-md"
                        >
                          <option value="">Select a category</option>
                          {EQUIPMENT_CATEGORIES.map((category) => (
                            <option key={category} value={category}>
                              {category}
                            </option>
                          ))}
                        </select>
                      </div>
                    </div>

                    <div className="sm:col-span-3">
                      <label htmlFor="price" className="block text-sm font-medium text-gray-700">
                        Price *
                      </label>
                      <div className="mt-1 relative rounded-md shadow-sm">
                        <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                          <span className="text-gray-500 sm:text-sm">$</span>
                        </div>
                        <input
                          type="text"
                          name="price"
                          id="price"
                          required
                          value={formData.price}
                          onChange={handleInputChange}
                          className="shadow-sm focus:ring-coffee-500 focus:border-coffee-500 block w-full pl-7 sm:text-sm border-gray-300 rounded-md"
                        />
                      </div>
                    </div>

                    <div className="sm:col-span-6">
                      <label htmlFor="description" className="block text-sm font-medium text-gray-700">
                        Description
                      </label>
                      <div className="mt-1">
                        <textarea
                          id="description"
                          name="description"
                          rows={3}
                          value={formData.description}
                          onChange={handleInputChange}
                          className="shadow-sm focus:ring-coffee-500 focus:border-coffee-500 block w-full sm:text-sm border-gray-300 rounded-md"
                        />
                      </div>
                    </div>

                    <div className="sm:col-span-3">
                      <label htmlFor="purchaseDate" className="block text-sm font-medium text-gray-700">
                        Purchase Date
                      </label>
                      <div className="mt-1">
                        <input
                          type="date"
                          name="purchaseDate"
                          id="purchaseDate"
                          value={formData.purchaseDate}
                          onChange={handleInputChange}
                          className="shadow-sm focus:ring-coffee-500 focus:border-coffee-500 block w-full sm:text-sm border-gray-300 rounded-md"
                        />
                      </div>
                    </div>

                    <div className="sm:col-span-3">
                      <label htmlFor="purchaseLocation" className="block text-sm font-medium text-gray-700">
                        Purchase Location
                      </label>
                      <div className="mt-1">
                        <input
                          type="text"
                          name="purchaseLocation"
                          id="purchaseLocation"
                          value={formData.purchaseLocation}
                          onChange={handleInputChange}
                          className="shadow-sm focus:ring-coffee-500 focus:border-coffee-500 block w-full sm:text-sm border-gray-300 rounded-md"
                        />
                      </div>
                    </div>

                    <div className="sm:col-span-6">
                      <label htmlFor="link" className="block text-sm font-medium text-gray-700">
                        Product Link
                      </label>
                      <div className="mt-1">
                        <input
                          type="url"
                          name="link"
                          id="link"
                          value={formData.link}
                          onChange={handleInputChange}
                          className="shadow-sm focus:ring-coffee-500 focus:border-coffee-500 block w-full sm:text-sm border-gray-300 rounded-md"
                        />
                      </div>
                    </div>

                    <div className="sm:col-span-6">
                      <label htmlFor="image" className="block text-sm font-medium text-gray-700">
                        Image URL
                      </label>
                      <div className="mt-1">
                        <input
                          type="url"
                          name="image"
                          id="image"
                          value={formData.image}
                          onChange={handleInputChange}
                          className="shadow-sm focus:ring-coffee-500 focus:border-coffee-500 block w-full sm:text-sm border-gray-300 rounded-md"
                        />
                      </div>
                    </div>

                    {formData.image && (
                      <div className="sm:col-span-6">
                        <p className="block text-sm font-medium text-gray-700 mb-2">Image Preview</p>
                        <img 
                          src={formData.image} 
                          alt="Equipment preview" 
                          className="h-48 w-auto object-contain border border-gray-200 rounded-md"
                        />
                      </div>
                    )}
                  </div>

                  <div className="flex justify-end space-x-3">
                    <button
                      type="button"
                      onClick={() => {
                        setShowForm(false);
                        setFormData({
                          name: '',
                          description: '',
                          category: '',
                          price: '',
                          purchaseDate: '',
                          purchaseLocation: '',
                          link: '',
                          image: '',
                        });
                      }}
                      className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-coffee-500"
                    >
                      Cancel
                    </button>
                    <button
                      type="submit"
                      disabled={isLoading}
                      className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-coffee-600 hover:bg-coffee-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-coffee-500 disabled:opacity-50"
                    >
                      {isLoading ? 'Saving...' : (
                        <>
                          Save
                          <ShortcutHint />
                        </>
                      )}
                    </button>
                  </div>
                </form>
              )}
            </div>
          )}
        </div>
      )}

      {/* Side Drawer */}
      {isDrawerOpen && selectedEquipment && (
        <div className="fixed top-0 right-0 h-full w-[440px] z-50">
          <div className="fixed inset-0 sm:hidden" onClick={() => setIsDrawerOpen(false)} />
          <div className="h-full w-full transform transition-transform duration-300 ease-in-out translate-x-0">
            <div className="flex h-full flex-col overflow-y-scroll bg-white border-l border-gray-200">
              <div className="px-4 py-6 sm:px-6 border-b border-gray-200">
                <div className="flex items-start justify-between">
                  <h2 className="text-lg font-medium text-gray-900">
                    Equipment Details
                  </h2>
                  <div className="ml-3 flex h-7 items-center">
                    <button
                      type="button"
                      className="rounded-md bg-white text-gray-400 hover:text-gray-500"
                      onClick={() => setIsDrawerOpen(false)}
                    >
                      <span className="sr-only">Close panel</span>
                      <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                      </svg>
                    </button>
                  </div>
                </div>
              </div>
              <div className="relative flex-1 px-4 sm:px-6">
                <div className="space-y-6">
                  <div>
                    <div className="aspect-w-16 aspect-h-9 rounded-lg bg-gray-100 overflow-hidden">
                      {selectedEquipment.image && (
                        <img
                          src={selectedEquipment.image}
                          alt={selectedEquipment.name}
                          className="object-cover"
                        />
                      )}
                    </div>
                  </div>

                  <div className="space-y-4">
                    <div>
                      <input
                        type="text"
                        value={selectedEquipment.name}
                        onChange={(e) => {
                          setSelectedEquipment({
                            ...selectedEquipment,
                            name: e.target.value
                          });
                        }}
                        className="text-lg font-medium text-gray-900 w-full border-0 border-b border-transparent hover:border-gray-300 focus:border-coffee-500 focus:ring-0 p-0 bg-transparent"
                      />
                      <textarea
                        value={selectedEquipment.description}
                        onChange={(e) => {
                          setSelectedEquipment({
                            ...selectedEquipment,
                            description: e.target.value
                          });
                        }}
                        rows={2}
                        className="mt-1 text-sm text-gray-500 w-full border-0 border-b border-transparent hover:border-gray-300 focus:border-coffee-500 focus:ring-0 p-0 bg-transparent resize-none"
                      />
                    </div>

                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <dt className="text-sm font-medium text-gray-500">Category</dt>
                        <select
                          value={selectedEquipment.category}
                          onChange={(e) => {
                            setSelectedEquipment({
                              ...selectedEquipment,
                              category: e.target.value
                            });
                          }}
                          className="mt-1 text-sm text-gray-900 w-full border-0 border-b border-transparent hover:border-gray-300 focus:border-coffee-500 focus:ring-0 p-0 bg-transparent"
                        >
                          {EQUIPMENT_CATEGORIES.map((category) => (
                            <option key={category} value={category}>
                              {category}
                            </option>
                          ))}
                        </select>
                      </div>
                      <div>
                        <dt className="text-sm font-medium text-gray-500">Price</dt>
                        <div className="relative">
                          <span className="absolute inset-y-0 left-0 text-gray-500">$</span>
                          <input
                            type="text"
                            value={selectedEquipment.price.replace('$', '')}
                            onChange={(e) => {
                              setSelectedEquipment({
                                ...selectedEquipment,
                                price: `$${e.target.value}`
                              });
                            }}
                            className="mt-1 text-sm text-gray-900 w-full border-0 border-b border-transparent hover:border-gray-300 focus:border-coffee-500 focus:ring-0 p-0 pl-4 bg-transparent"
                          />
                        </div>
                      </div>
                      <div>
                        <dt className="text-sm font-medium text-gray-500">Purchase Date</dt>
                        <input
                          type="date"
                          value={selectedEquipment.purchaseDate}
                          onChange={(e) => {
                            setSelectedEquipment({
                              ...selectedEquipment,
                              purchaseDate: e.target.value
                            });
                          }}
                          className="mt-1 text-sm text-gray-900 w-full border-0 border-b border-transparent hover:border-gray-300 focus:border-coffee-500 focus:ring-0 p-0 bg-transparent"
                        />
                      </div>
                      <div>
                        <dt className="text-sm font-medium text-gray-500">Purchase Location</dt>
                        <input
                          type="text"
                          value={selectedEquipment.purchaseLocation}
                          onChange={(e) => {
                            setSelectedEquipment({
                              ...selectedEquipment,
                              purchaseLocation: e.target.value
                            });
                          }}
                          className="mt-1 text-sm text-gray-900 w-full border-0 border-b border-transparent hover:border-gray-300 focus:border-coffee-500 focus:ring-0 p-0 bg-transparent"
                        />
                      </div>
                    </div>

                    {selectedEquipment.link && (
                      <div>
                        <dt className="text-sm font-medium text-gray-500">Product Link</dt>
                        <dd className="mt-1">
                          <input
                            type="url"
                            value={selectedEquipment.link}
                            onChange={(e) => {
                              setSelectedEquipment({
                                ...selectedEquipment,
                                link: e.target.value
                              });
                            }}
                            className="text-sm text-coffee-600 hover:text-coffee-500 w-full border-0 border-b border-transparent hover:border-gray-300 focus:border-coffee-500 focus:ring-0 p-0 bg-transparent"
                          />
                        </dd>
                      </div>
                    )}
                  </div>

                  <div className="flex space-x-3">
                    <button
                      type="button"
                      onClick={() => {
                        // Save changes
                        console.log('Saving changes:', selectedEquipment);
                        setIsDrawerOpen(false);
                      }}
                      className="flex-1 inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-coffee-600 hover:bg-coffee-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-coffee-500"
                    >
                      Save Changes
                    </button>
                    <button
                      type="button"
                      onClick={() => handleDelete(selectedEquipment.id)}
                      className="flex-1 inline-flex items-center justify-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-coffee-500"
                    >
                      Delete
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default EquipmentListPage; 